name: Run MemorySanitizer

on:
  push:
  
jobs:
  run-msan:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]
        
    steps:
      - name: Check out repository
        uses: actions/checkout@v2 
        with:
          ref: e32c498941d5d92b4695626e805c84802c018038
          submodules: recursive

      - name: Set up Go v1.22
        uses: actions/setup-go@v2
        with:
          go-version: 1.22
        
      - name: Install dependencies and build project (Linux)
        if: runner.os == 'Linux'
        run: | 
          git submodule update --init --recursive
          sudo apt-get update
          sudo apt-get install -y libuuid1 libuv1 libuv1-dev libcups2 libcups2-dev cups-* libmongoc-1.0-0 libmongoc-dev libsnappy-dev libsnappy1v5 libyaml-0-2 libyaml-dev libxen-dev libxen-dev libxencall1 ninja-build generate-ninja libelf-dev libelf1 libprotobuf-dev libprotobuf23 gogoprotobuf libipmimonitoring-dev libipmimonitoring6 libmnl-dev libnetfilter-acct-dev systemd libsystemd0 libsystemd-dev libh2o-dev libbrotli-dev  liblz4-1 liblz4-dev liblz4-tool
          cmake -S . -B build -G "Ninja" && cmake --build build 
          
      - name: Install dependencies and build project (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ossp-uuid autoconf automake pkg-config libuv lz4 json-c openssl libtool cmake
          ./netdata-installer.sh --install-prefix .

      - name: Install MemorySanitizer dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y clang-14 libclang-14-dev llvm-14 llvm-14-dev llvm-14-tools llvm-14-linker-tools

      - name: Install MemorySanitizer dependencies (macOS) 
        if: runner.os == 'macOS' 
        run: |
          brew update
          brew install llvm ninja coreutils
          
      - name: Disable Address Space Randomization
        if: runner.os == 'Linux'
        run: sudo sysctl -w kernel.randomize_va_space=0
      
      - name: Disable swapping 
        if: runner.os == 'Linux' 
        run: sudo swapoff -a

      - name: Disable swapping 
        if: runner.os == 'macOS'
        run: | 
          sudo sysctl -w vm.swapusage=0
          sudo sysctl -w vm.compressor_mode=1
      
      - name: Run Google Memory Sanitizer (source code) (Linux)
        if: runner.os == 'Linux'
        run: |
          #!/bin/bash
          set +e 

          mkdir -p memorysan_logs
          files=$(find . -type f)
          failed_compilations=0
          successful_compilations=0
          TIMEOUT_DURATION=10

          for file in $files; do
              if [[ "$file" == *.c || "$file" == *.cpp ]]; then
                  include_dirs=$(find . -name '*.h' -exec dirname {} + | sort -u | sed 's/^/-I /')
                  if ! timeout 60 clang -I "$include_dirs" -fsanitize=memory -fPIE -pie -O2 -fno-omit-frame-pointer -fsanitize-memory-track-origins -g "$file" -o ./compiled.out > /dev/null 2> /tmp/clang_errors.txt; then
                      exit_code=$?
                      if [ $exit_code -eq 1 ]; then
                          ((failed_compilations += 1))
                      fi
                      continue  # Skip to the next file on compilation error
                  fi

                  timeout $TIMEOUT_DURATION ./compiled.out > ./memorysan_logs/$(basename "$executable")_msan_report.txt 2>&1
                  exit_status=$?

                  if [ $exit_status -eq 1 ]; then
                      ((successful_compilations += 1))
                      echo -e "\a"
                  else
                      ((failed_compilations += 1))
                  fi

                  rm -f ./compiled.out
              fi
          done
          echo -e "\a"

          echo "Memory Sanitizer Failures: $failed_compilations"
          echo "Memory Sanitizer Successes: $successful_compilations"

      - name: Run Google Memory Sanitizer (source code) (macOS)
        if: runner.os == 'macOS'
        env:
          DYLD_NO_PIE: 1
        run: |
          #!/bin/bash
          set +e 

          mkdir -p memorysan_logs
          files=$(find . -type f)
          failed_compilations=0
          successful_compilations=0
          TIMEOUT_DURATION=10

          for file in $files; do
              if [[ "$file" == *.c || "$file" == *.cpp ]]; then
                  include_dirs=$(find . -name '*.h' -exec dirname {} + | sort -u | sed 's/^/-I /')
                  if ! timeout 60 clang -I "$include_dirs" -fsanitize=memory -fPIE -pie -O2 -fno-omit-frame-pointer -fsanitize-memory-track-origins -g "$file" -o ./compiled.out > /dev/null 2> /tmp/clang_errors.txt; then
                      exit_code=$?
                      if [ $exit_code -eq 1 ]; then
                          ((failed_compilations += 1))
                      fi
                      continue  # Skip to the next file on compilation error
                  fi

                  gtimeout $TIMEOUT_DURATION ./compiled.out > ./memorysan_logs/$(basename "$executable")_msan_report.txt 2>&1
                  exit_status=$?

                  if [ $exit_status -eq 1 ]; then
                      ((successful_compilations += 1))
                      echo -e "\a"
                  else
                      ((failed_compilations += 1))
                  fi

                  rm -f ./compiled.out
              fi
          done
          echo -e "\a"

          echo "Memory Sanitizer Failures: $failed_compilations"
          echo "Memory Sanitizer Successes: $successful_compilations"

      - name: Upload Msan reports
        uses: actions/upload-artifact@v4
        with:
          name: msan-report-${{ github.event.repository.name}}-on-${{ matrix.os }}-from_branch_${{ github.ref_name }}
          path: './memorysan_logs/*'
