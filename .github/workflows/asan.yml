name: Run Address Sanitizer

on:
  push:

jobs:
  run-asan:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]
        
    steps:
      - name: Check out repository
        uses: actions/checkout@v2 
        with:
          ref: e32c498941d5d92b4695626e805c84802c018038
          submodules: recursive
  
      - name: Set up Go v1.22
        uses: actions/setup-go@v2
        with:
          go-version: 1.22
  
      - name: Install dependencies for project (Linux)
        if: runner.os == 'Linux'
        run: | 
          sudo apt-get update
          sudo apt-get install -y libuuid1 libuv1 libuv1-dev libcups2 libcups2-dev cups-* libmongoc-1.0-0 libmongoc-dev libsnappy-dev libsnappy1v5 libyaml-0-2 libyaml-dev libxen-dev libxencall1 ninja-build generate-ninja libelf-dev libelf1 libprotobuf-dev libprotobuf23 gogoprotobuf libipmimonitoring-dev libipmimonitoring6 libmnl-dev libnetfilter-acct-dev systemd libsystemd0 libsystemd-dev libh2o-dev libbrotli-dev  liblz4-1 liblz4-dev liblz4-tool h2o-*
          export PKG_CONFIG_PATH="/usr/lib/pkgconfig"
          
      - name: Install dependencies for project (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update && brew install cmake wget
          
          wget https://github.com/macports/macports-base/releases/download/v2.9.3/MacPorts-2.9.3.tar.gz
          tar -xvzf MacPorts-2.9.3.tar.gz
          cd MacPorts-2.9.3
          ./configure && make && sudo make install 
          cd ../ && rm -rf MacPorts-2.9.3*
          echo 'export PATH="/opt/local/bin:$PATH"' >> ~/.bash_profile
          source ~/.bash_profile
          sudo port -v selfupdate
          
          sudo port selfupdate
          sudo port install libuuid libuv libgnomecups mongo-c-driver snappy libyaml ninja cmake protobuf-c ipmitool brotli lz4 h2o
          
      - name: Build repository 
        run: | 
          cmake -S . -B build -G "Ninja" && cmake --build build 
  
      - name: Install Address Sanitizer dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y clang-14 libclang-14-dev llvm-14 llvm-14-dev llvm-14-tools llvm-14-linker-tools

      - name: Install Address Sanitizer dependencies (macOS) 
        if: runner.os == 'macOS' 
        run: |
          brew update
          brew install llvm ninja
      
      - name: Run Google Address Sanitizer
        run: |
          #!/bin/bash

          set +e
          files=$(find . -type f)
          failed_compilations=0
          successful_compilations=0
          TIMEOUT_DURATION=60
  
          for file in $files; do
              if [[ "$file" == *.c || "$file" == *.cpp ]]; then
                  include_dirs=$(find . -name '*.h' -exec dirname {} + | sort -u | sed 's/^/-I /')
                  clang -I "$include_dirs" -fsanitize=address -O1 -fno-omit-frame-pointer -fno-common -fsanitize-recover=address -g "$file" -o ./compiled.out > compilation.log 2>&1
                  if [ $? -eq 0 ]; then
                      timeout $TIMEOUT_DURATION ./compiled.out
                      exit_status=$?
                      if [ $exit_status -ne 0 ]; then
                          ((successful_compilations += 1))
                          cat compilation.log
                          echo "--------------------------------------------------"
                      else
                          ((failed_compilations += 1))
                      fi
                  else
                      ((failed_compilations += 1))
                  fi
                  rm -f ./compiled.out
              fi
          done
  
          echo "Address Sanitizer Failures: $failed_compilations"
          echo "Address Sanitizer Successes: $successful_compilations"
  
          # Check for the specific error message
          if grep -q "caution: filename not matched: META-INF/MANIFEST.MF" compilation.log; then
              echo "Error detected: caution: filename not matched: META-INF/MANIFEST.MF"
              exit 1
          fi
